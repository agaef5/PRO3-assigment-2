package com.slaughterhouse.grpc;

import com.google.protobuf.Empty;
import com.google.protobuf.Timestamp;
import com.slaughterhouse.DAO.AnimalRepository;
import com.slaughterhouse.Entities.Animal;
import io.grpc.stub.StreamObserver;
import net.devh.boot.grpc.server.service.GrpcService;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.Instant;

@GrpcService
public class SlaughterHouseServiceImpl extends SlaughterHouseServiceGrpc.SlaughterHouseServiceImplBase {

  private final AnimalRepository animalRepository;

  @Autowired
  public SlaughterHouseServiceImpl(AnimalRepository animalRepository) {
    this.animalRepository = animalRepository;
  }

  @Override
  public void addAnimal(AnimalRequest request, StreamObserver<AnimalResponse> responseObserver) {
    Animal inEntity = toEntity(request.getAnimal());
    Animal saved = animalRepository.save(inEntity);

    var out = toProto(saved);
    responseObserver.onNext(AnimalResponse.newBuilder().setAnimal(out).build());
    responseObserver.onCompleted();
  }

  @Override
  public void getAllAnimals(Empty request, StreamObserver<AllAnimalsResponse> responseObserver) {
    var animals = animalRepository.findAll();

    AllAnimalsResponse.Builder resp = AllAnimalsResponse.newBuilder();
    for (Animal a : animals) {
      resp.addAnimals(toProto(a));
    }

    responseObserver.onNext(resp.build());
    responseObserver.onCompleted();
  }

  // ---------- Mapping helpers ----------

  private Animal toEntity(com.slaughterhouse.grpc.Animal msg) {
    Animal a = new Animal();
    // ID is generated by DB; ignore msg.getAnimalId() for create
    a.setRegistrationNumber(msg.getRegistrationNumber());
    a.setWeight(msg.getAnimalWeight());

    Timestamp ts = msg.getArrivalDate();
    Instant instant = Instant.ofEpochSecond(ts.getSeconds(), ts.getNanos());
    a.setArrivalDate(java.sql.Timestamp.from(instant));

    return a;
  }

  private com.slaughterhouse.grpc.Animal toProto(Animal entity) {
    Instant instant = entity.getArrivalDate().toInstant();
    Timestamp ts = Timestamp.newBuilder()
        .setSeconds(instant.getEpochSecond())
        .setNanos(instant.getNano())
        .build();

    return com.slaughterhouse.grpc.Animal.newBuilder()
        .setAnimalId(entity.getId()) // proto int64 â†” JPA Long
        .setRegistrationNumber(entity.getRegistrationNumber())
        .setAnimalWeight(entity.getWeight())
        .setArrivalDate(ts)
        .build();
  }
}
